uuid: d0d4817a-5b1b-4f4e-accc-991316b2513f
projectId: konro
createdAt: '2025-07-08T01:18:13.370Z'
gitCommitMsg: 'fix(types): Correct schema type generation and query result casting'
promptSummary: >-
  Fix a series of TypeScript errors in the codebase, primarily related to
  incorrect type inference for schema creation types and query results.
reasoning:
  - >-
    I will address the TypeScript errors by fixing the root cause, which lies in
    the type generation within `src/schema.ts`. The other errors in the test
    files are cascading effects of this primary issue.
  - '### 1. Fix `create` type generation in `src/schema.ts`'
  - >-
    The current implementation of `CreateModel` and `CreateModels` has a generic
    constraint issue that causes `schema.create.users` (and other create types)
    to be inferred incorrectly. This leads to failures in `db.insert` calls
    throughout the tests, as the provided objects don't match the wrongly
    inferred type.
  - >-
    I will rewrite `CreateModel` to derive all necessary types directly from
    `TTableDef`, removing the problematic dependency on a separate `TBaseModel`
    generic argument. This will fix the `TS2344` error and, consequently, all
    `TS2769` and `TS2345` errors related to `db.insert`.
  - '### 2. Fix unsafe `async` casts in `src/db.ts`'
  - >-
    The `all` and `first` methods in `db.ts` use a problematic casting syntax
    with `async` arrow functions. While it may work in some TypeScript versions,
    it's ambiguous and can lead to misinterpretation by the compiler. I will
    refactor them to use explicit `Promise` return type annotations, which is
    safer and clearer. This will improve type safety and should resolve the
    downstream `TS2532` and `TS2339` errors in the `FullLifecycle` tests by
    ensuring the query results are correctly typed.
  - >-
    The use of `as any` is required here because `_queryImpl` returns
    `KRecord[]`, which is not directly assignable to the more specific
    `S['types'][T][]`. The type annotation on the function
    (`Promise<S['types'][T][]>`) ensures the caller receives the correctly typed
    promise, and this pattern is a standard way to bridge a less-typed
    implementation with a strictly-typed public API.
  - >-
    This concludes the necessary changes. The fix in `schema.ts` is the primary
    one that resolves the bulk of the errors, and the change in `db.ts` corrects
    the remaining type inference issues for query results.
operations:
  - type: write
    path: src/schema.ts
    content: >-
      <<<<<<< SEARCH

      :start_line:64

      type CreateModel<TBaseModel, TTableDef extends Record<string,
      ColumnDefinition<any>>> = Pretty<
          // Fields with defaults are optional
          Partial<Pick<TBaseModel, WithDefaultKey<TTableDef>>> &
          // All other fields, except the ID, are required
          Omit<TBaseModel, IdKey<TTableDef> | WithDefaultKey<TTableDef>>
      >;


      type BaseModels<TTables extends Record<string, Record<string,
      ColumnDefinition<any>>>> = {
        [TableName in keyof TTables]: {
          [ColumnName in keyof TTables[TableName]]: TTables[TableName][ColumnName]['_tsType'];
        };
      };


      type CreateModels<TTables extends Record<string, Record<string,
      ColumnDefinition<any>>>> = {
          [TableName in keyof TTables]: CreateModel<BaseModels<TTables>[TableName], TTables[TableName]>
      };

      =======

      type CreateModel<TTableDef extends Record<string, ColumnDefinition<any>>>
      = Pretty<
          // Fields with defaults are optional
          Partial<{ [K in WithDefaultKey<TTableDef>]: TTableDef[K]['_tsType'] }> &
          // All other fields, except the ID and defaults, are required
          { [K in Exclude<keyof TTableDef, IdKey<TTableDef> | WithDefaultKey<TTableDef>>]: TTableDef[K]['_tsType'] }
      >;


      type BaseModels<TTables extends Record<string, Record<string,
      ColumnDefinition<any>>>> = {
        [TableName in keyof TTables]: {
          [ColumnName in keyof TTables[TableName]]: TTables[TableName][ColumnName]['_tsType'];
        };
      };


      type CreateModels<TTables extends Record<string, Record<string,
      ColumnDefinition<any>>>> = {
          [TableName in keyof TTables]: CreateModel<TTables[TableName]>
      };

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/db.ts
    content: |-
      <<<<<<< SEARCH
      :start_line:111
                all: async () => _queryImpl(state, schema, descriptor) as S['types'][T][],
                first: async () => (_queryImpl(state, schema, { ...descriptor, limit: 1 })[0] ?? null) as S['types'][T] | null,
                aggregate: async <TAggs extends Record<string, AggregationDefinition>>(aggregations: TAggs) => {
      =======
                all: async (): Promise<S['types'][T][]> => _queryImpl(state, schema, descriptor) as any,
                first: async (): Promise<S['types'][T] | null> => (_queryImpl(state, schema, { ...descriptor, limit: 1 })[0] ?? null) as any,
                aggregate: async <TAggs extends Record<string, AggregationDefinition>>(aggregations: TAggs): Promise<{ [K in keyof TAggs]: number | null }> => {
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/schema.ts: >
    // --- TYPE UTILITIES ---

    type Pretty<T> = { [K in keyof T]: T[K] } & {};


    // --- CORE DEFINITIONS ---


    export interface ColumnOptions<T> {
      unique?: boolean;
      default?: T | (() => T);
    }


    export interface StringColumnOptions extends ColumnOptions<string> {
      min?: number;
      max?: number;
      format?: 'email' | 'uuid' | 'url';
    }


    export interface NumberColumnOptions extends ColumnOptions<number> {
      min?: number;
      max?: number;
      type?: 'integer';
    }


    export interface ColumnDefinition<T> {
      _type: 'column';
      dataType: 'id' | 'string' | 'number' | 'boolean' | 'date' | 'object';
      options?: ColumnOptions<T>;
      _tsType: T; // For TypeScript inference only
    }


    export interface StringColumnDefinition extends ColumnDefinition<string> {
      dataType: 'string';
      options?: StringColumnOptions;
    }


    export interface NumberColumnDefinition extends ColumnDefinition<number> {
      dataType: 'number';
      options?: NumberColumnOptions;
    }


    export interface RelationDefinition {
      _type: 'relation';
      relationType: 'one' | 'many';
      targetTable: string;
      on: string;
      references: string;
    }


    export interface AggregationDefinition {
      _type: 'aggregation';
      aggType: 'sum' | 'avg' | 'min' | 'max' | 'count';
      column?: string;
    }


    // --- TYPE INFERENCE MAGIC ---


    // Find keys for ID columns

    type IdKey<TTableDef extends Record<string, ColumnDefinition<any>>> = {
        [K in keyof TTableDef]: TTableDef[K]['dataType'] extends 'id' ? K : never;
    }[keyof TTableDef];


    // Find keys for columns with defaults

    type WithDefaultKey<TTableDef extends Record<string, ColumnDefinition<any>>>
    = {
        [K in keyof TTableDef]: TTableDef[K]['options'] extends { default: any } ? K : never;
    }[keyof TTableDef];


    type CreateModel<TBaseModel, TTableDef extends Record<string,
    ColumnDefinition<any>>> = Pretty<
        // Fields with defaults are optional
        Partial<Pick<TBaseModel, WithDefaultKey<TTableDef>>> &
        // All other fields, except the ID, are required
        Omit<TBaseModel, IdKey<TTableDef> | WithDefaultKey<TTableDef>>
    >;


    type BaseModels<TTables extends Record<string, Record<string,
    ColumnDefinition<any>>>> = {
      [TableName in keyof TTables]: {
        [ColumnName in keyof TTables[TableName]]: TTables[TableName][ColumnName]['_tsType'];
      };
    };


    type CreateModels<TTables extends Record<string, Record<string,
    ColumnDefinition<any>>>> = {
        [TableName in keyof TTables]: CreateModel<BaseModels<TTables>[TableName], TTables[TableName]>
    };


    type WithRelations<
      TBaseModels extends Record<string, any>,
      TRelations extends Record<string, Record<string, RelationDefinition>>
    > = {
        [TableName in keyof TBaseModels]: TBaseModels[TableName] & (TableName extends keyof TRelations ? {
          [RelationName in keyof TRelations[TableName]]?: TRelations[TableName][RelationName]['relationType'] extends 'one'
          ? TBaseModels[TRelations[TableName][RelationName]['targetTable']] | null
          : TBaseModels[TRelations[TableName][RelationName]['targetTable']][];
        } : {});
      };

    export interface KonroSchema<
      TTables extends Record<string, Record<string, ColumnDefinition<any>>>,
      TRelations extends Record<string, Record<string, RelationDefinition>>
    > {
      tables: TTables;
      relations: TRelations;
      types: Pretty<WithRelations<BaseModels<TTables>, TRelations>>;
      create: CreateModels<TTables>;
    }


    // --- SCHEMA HELPERS ---


    export const id = (): ColumnDefinition<number> => ({ _type: 'column',
    dataType: 'id', options: { unique: true }, _tsType: 0 });

    export const string = (options?: StringColumnOptions):
    StringColumnDefinition => ({ _type: 'column', dataType: 'string', options,
    _tsType: '' });

    export const number = (options?: NumberColumnOptions):
    NumberColumnDefinition => ({ _type: 'column', dataType: 'number', options,
    _tsType: 0 });

    export const boolean = (options?: ColumnOptions<boolean>):
    ColumnDefinition<boolean> => ({ _type: 'column', dataType: 'boolean',
    options, _tsType: false });

    export const date = (options?: ColumnOptions<Date>): ColumnDefinition<Date>
    => ({ _type: 'column', dataType: 'date', options, _tsType: new Date() });

    export const object = <T extends Record<string, any>>(options?:
    ColumnOptions<T>): ColumnDefinition<T> => ({ _type: 'column', dataType:
    'object', options, _tsType: undefined! });


    export const one = (targetTable: string, options: { on: string; references:
    string }): RelationDefinition => ({ _type: 'relation', relationType: 'one',
    targetTable, ...options });

    export const many = (targetTable: string, options: { on: string; references:
    string }): RelationDefinition => ({ _type: 'relation', relationType: 'many',
    targetTable, ...options });



    // --- AGGREGATION HELPERS ---


    export const count = (): AggregationDefinition => ({ _type: 'aggregation',
    aggType: 'count' });

    export const sum = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'sum', column });

    export const avg = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'avg', column });

    export const min = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'min', column });

    export const max = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'max', column });

    // --- SCHEMA BUILDER ---


    type SchemaInputDef<T> = {
      tables: T;
      relations?: (tables: T) => Record<string, Record<string, RelationDefinition>>;
    };


    export function createSchema<const TDef extends
    SchemaInputDef<any>>(definition: TDef) {
      const relations = definition.relations ? definition.relations(definition.tables) : {};
      return {
        tables: definition.tables,
        relations,
        types: null as any, // This is a runtime placeholder for the inferred types
        create: null as any, // This is a runtime placeholder for the create types
      } as KonroSchema<
        TDef['tables'],
        TDef['relations'] extends (...args: any) => any ? ReturnType<TDef['relations']> : {}
      >;
    }
  src/db.ts: >
    import { AggregationDefinition, ColumnDefinition, KonroSchema,
    RelationDefinition } from './schema';

    import { StorageAdapter } from './adapter';

    import { DatabaseState, KRecord } from './types';

    import { _queryImpl, _insertImpl, _updateImpl, _deleteImpl, createEmptyState
    as createEmptyStateImpl, QueryDescriptor, _aggregateImpl,
    AggregationDescriptor } from './operations';

    import { createPredicateFromPartial } from './utils/predicate.util';


    // A helper to normalize a predicate argument

    const normalizePredicate = <T extends KRecord>(
      predicate: Partial<T> | ((record: T) => boolean)
    ): ((record: KRecord) => boolean) =>
      // The cast is necessary due to function argument contravariance.
      // The internal operations work on the wider `KRecord`, while the fluent API provides the specific `T`.
      (typeof predicate === 'function' ? predicate : createPredicateFromPartial(predicate)) as (record: KRecord) => boolean;

    // --- TYPE-SAFE FLUENT API BUILDERS ---


    interface ChainedQueryBuilder<T> {
      select(fields: Record<string, ColumnDefinition<unknown> | RelationDefinition>): this;
      where(predicate: Partial<T> | ((record: T) => boolean)): this;
      with(relations: QueryDescriptor['with']): this;
      limit(count: number): this;
      offset(count: number): this;
      all(): Promise<T[]>;
      first(): Promise<T | null>;
      aggregate<TAggs extends Record<string, AggregationDefinition>>(
        aggregations: TAggs
      ): Promise<{ [K in keyof TAggs]: number | null }>;
    }


    interface QueryBuilder<S extends KonroSchema<any, any>> {
      from<T extends keyof S['tables']>(tableName: T): ChainedQueryBuilder<S['types'][T]>;
    }


    interface UpdateBuilder<T> {
      set(data: Partial<T>): {
        where(predicate: Partial<T> | ((record: T) => boolean)): Promise<[DatabaseState, T[]]>;
      };
    }


    interface DeleteBuilder<T> {
      where(predicate: Partial<T> | ((record: T) => boolean)): Promise<[DatabaseState, T[]]>;
    }


    export interface DbContext<S extends KonroSchema<any, any>> {
      schema: S;
      adapter: StorageAdapter;
      read(): Promise<DatabaseState>;
      write(state: DatabaseState): Promise<void>;
      createEmptyState(): DatabaseState;

      query(state: DatabaseState): QueryBuilder<S>;
      insert<T extends keyof S['types']>(state: DatabaseState, tableName: T, values: S['create'][T]): [DatabaseState, S['types'][T]];
      insert<T extends keyof S['types']>(state: DatabaseState, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState, S['types'][T][]];
      update<T extends keyof S['tables']>(state: DatabaseState, tableName: T): UpdateBuilder<S['types'][T]>;
      delete<T extends keyof S['tables']>(state: DatabaseState, tableName: T): DeleteBuilder<S['types'][T]>;
    }


    export const createDatabase = <S extends KonroSchema<any, any>>(options: {
    schema: S, adapter: StorageAdapter }): DbContext<S> => {
      const { schema, adapter } = options;

      return {
        schema,
        adapter,
        read: () => adapter.read(schema),
        write: (state) => adapter.write(state),
        createEmptyState: () => createEmptyStateImpl(schema),

        insert: (<T extends keyof S['types']>(
          state: DatabaseState,
          tableName: T,
          values: S['create'][T] | Readonly<S['create'][T]>[]
        ): [DatabaseState, S['types'][T] | S['types'][T][]] => {
          const valsArray = Array.isArray(values) ? values : [values];
          const [newState, inserted] = _insertImpl(state, schema, tableName as string, valsArray as KRecord[]);
          const result = Array.isArray(values) ? inserted : inserted[0];
          return [newState, result] as [DatabaseState, S['types'][T] | S['types'][T][]];
        }) as {
          <T extends keyof S['types']>(state: DatabaseState, tableName: T, values: S['create'][T]): [DatabaseState, S['types'][T]];
          <T extends keyof S['types']>(state: DatabaseState, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState, S['types'][T][]];
        },

        query: (state: DatabaseState): QueryBuilder<S> => ({
          from: <T extends keyof S['tables']>(tableName: T): ChainedQueryBuilder<S['types'][T]> => {
            const descriptor: QueryDescriptor = { tableName: tableName as string };

            const builder: ChainedQueryBuilder<S['types'][T]> = {
              select: (fields) => {
                descriptor.select = fields;
                return builder;
              },
              where: (predicate) => {
                descriptor.where = normalizePredicate(predicate);
                return builder;
              },
              with: (relations) => {
                descriptor.with = relations;
                return builder;
              },
              limit: (count) => {
                descriptor.limit = count;
                return builder;
              },
              offset: (count) => {
                descriptor.offset = count;
                return builder;
              },
              all: async () => _queryImpl(state, schema, descriptor) as S['types'][T][],
              first: async () => (_queryImpl(state, schema, { ...descriptor, limit: 1 })[0] ?? null) as S['types'][T] | null,
              aggregate: async <TAggs extends Record<string, AggregationDefinition>>(aggregations: TAggs) => {
                const aggDescriptor: AggregationDescriptor = { ...descriptor, aggregations };
                return _aggregateImpl(state, schema, aggDescriptor) as { [K in keyof TAggs]: number | null };
              },
            };
            return builder;
          },
        }),

        update: <T extends keyof S['tables']>(state: DatabaseState, tableName: T): UpdateBuilder<S['types'][T]> => ({
          set: (data) => ({
            where: async (predicate) => {
              const [newState, updatedRecords] = _updateImpl(state, schema, tableName as string, data as Partial<KRecord>, normalizePredicate(predicate));
              return [newState, updatedRecords as S['types'][T][]];
            },
          }),
        }),

        delete: <T extends keyof S['tables']>(state: DatabaseState, tableName: T): DeleteBuilder<S['types'][T]> => ({
          where: async (predicate) => {
            const [newState, deletedRecords] = _deleteImpl(state, tableName as string, normalizePredicate(predicate));
            return [newState, deletedRecords as S['types'][T][]];
          },
        }),
      };
    };
approved: true
