uuid: 4d28f804-d57b-4022-83de-a8775f29919f
projectId: konro
createdAt: '2025-07-08T15:43:36.140Z'
linesAdded: 31
linesRemoved: 9
gitCommitMsg: 'fix(types): implement precise query return types for with()'
promptSummary: >-
  The user pointed out that the type inference for eager loading was too
  'optimistic', allowing access to nested relations that weren't actually loaded
  by the query. This patch corrects the type definitions in `src/db.ts` to make
  them 'honest'. It introduces a more precise, recursive mapped type
  (`ResolveWith`) that constructs an accurate return type based on the `.with()`
  clause's structure. It also makes `.select()` and nested `.with()` mutually
  exclusive in the types to match runtime behavior. This prevents type errors
  and makes the query builder safer and more intuitive.
reasoning:
  - >-
    You are absolutely correct. Your observation points to a subtle but
    important distinction between the static, fully-relational type of a model
    (like `Post` which includes its `author` relation) and the actual data
    returned by a specific query. A simple `.with({ posts: true })` should
    indeed only load the `posts`, not the `author` on each post.
  - >-
    The previous implementation's types were too "optimistic," allowing you to
    access `post.author` without a type error, even though it would be
    `undefined` at runtime. This is misleading.
  - >-
    I've created a patch for `src/db.ts` to fix this. This patch makes the query
    return types "honest" by recursively constructing a precise return type
    based on the structure of your `.with()` call.
  - 'Here''s what changes:'
  - >-
    1.  **More Accurate Return Types**: The type inference for `.with()` is now
    much smarter.
  - >-
    *   `.with({ posts: true })` will now type `posts` as an array of *base*
    `Post` models (i.e., without the `author` property), correctly causing a
    type error if you try to access `post.author`.
  - >-
    *   `.with({ posts: { with: { author: true } } })` will correctly type
    `posts` as an array of `Post` models that *do* include the `author`
    property.
  - >-
    2.  **Mutually Exclusive Options**: The types now prevent you from using
    `.select()` and a nested `.with()` on the same relation, which matches the
    runtime behavior and avoids confusion.
  - >-
    This change makes the library safer and more intuitive to use, directly
    addressing the excellent point you raised.
operations:
  - type: write
    path: src/db.ts
    content: >-
      --- src/db.ts

      +++ src/db.ts

      @@ -10,23 +10,48 @@
       
       // --- TYPE HELPERS for Fluent API ---
       
      -type RelatedModel<T> = T extends (infer R)[] ? R : T extends (infer R |
      null) ? R : never;

      +type RelatedModel<T> = T extends (infer R)[] ? R : T extends (infer R |
      null) ? R : T;
       
       // TAll is the full relational model type, e.g. schema.types.users
      -type WithArgument<TAll> = {

      -  // K is a relation name like 'posts' or 'profile'

      -  [K in keyof TAll as NonNullable<TAll[K]> extends any[] | object ? K :
      never]?: boolean | {

      +type WithArgument<TAll> = { // e.g. TAll = S['types']['users']

      +  [K in keyof TAll as NonNullable<TAll[K]> extends any[] | object ? K :
      never]?: boolean | ({
           where?: (record: RelatedModel<NonNullable<TAll[K]>>) => boolean;
      -    select?: Record<string, ColumnDefinition<unknown>>;

      -  };

      +  } & (

      +    | { select: Record<string, ColumnDefinition<unknown>>; with?: never }

      +    | { select?: never; with?:
      WithArgument<RelatedModel<NonNullable<TAll[K]>>> }

      +  ));
       };
       
       type ResolveWith<
         S extends KonroSchema<any, any>,
         TName extends keyof S['tables'],
         TWith extends WithArgument<S['types'][TName]>
      -> = {

      -  // K will be 'posts', 'profile', etc.

      -  [K in keyof TWith as K extends keyof S['types'][TName] ? K : never]:
      S['types'][TName][K];

      +> = { // TName='users', TWith={posts: {with: {author: true}}}

      +    [K in keyof TWith & keyof S['relations'][TName]]:

      +        S['relations'][TName][K] extends { relationType: 'many' }

      +            ? ( // 'many' relation -> array result. K = 'posts'

      +                TWith[K] extends { select: infer TSelect }

      +                    ? ({ [P in keyof TSelect]:
      InferColumnType<TSelect[P]> })[]

      +                    : TWith[K] extends { with: infer TNestedWith }

      +                        // posts: { with: { author: true } }. TNestedWith
      = { author: true }

      +                        //
      S['relations']['users']['posts']['targetTable'] = 'posts'

      +                        ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith>)[]

      +                        // posts: true.

      +                        :
      S['base'][S['relations'][TName][K]['targetTable']][]

      +              )

      +            : S['relations'][TName][K] extends { relationType: 'one' }

      +                ? ( // 'one' relation -> nullable object result

      +                    TWith[K] extends { select: infer TSelect }

      +                        ? ({ [P in keyof TSelect]:
      InferColumnType<TSelect[P]> }) | null

      +                        : TWith[K] extends { with: infer TNestedWith }

      +                            ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith>) | null

      +                            :
      S['base'][S['relations'][TName][K]['targetTable']] | null

      +                  )

      +                : never
       };
       
      +// InferColumnType is not exported from schema, so we need it here too.

      +type InferColumnType<C> = C extends ColumnDefinition<infer T> ? T :
      never;
       
       // --- TYPE-SAFE FLUENT API BUILDERS ---
    patchStrategy: new-unified
snapshot:
  src/db.ts: >-
    import { AggregationDefinition, ColumnDefinition, KonroSchema,
    RelationDefinition } from './schema';

    import { StorageAdapter } from './adapter';

    import { DatabaseState, KRecord } from './types';

    import { _queryImpl, _insertImpl, _updateImpl, _deleteImpl, createEmptyState
    as createEmptyStateImpl, QueryDescriptor, _aggregateImpl,
    AggregationDescriptor } from './operations';

    import { createPredicateFromPartial } from './utils/predicate.util';


    // A helper to normalize a predicate argument

    const normalizePredicate = <T extends KRecord>(
      predicate: Partial<T> | ((record: T) => boolean)
    ): ((record: KRecord) => boolean) =>
      // The cast is necessary due to function argument contravariance.
      // The internal operations work on the wider `KRecord`, while the fluent API provides the specific `T`.
      (typeof predicate === 'function' ? predicate : createPredicateFromPartial(predicate)) as (record: KRecord) => boolean;

    // --- TYPE HELPERS for Fluent API ---


    type RelatedModel<T> = T extends (infer R)[] ? R : T extends (infer R |
    null) ? R : T;


    // TAll is the full relational model type, e.g. schema.types.users

    type WithArgument<TAll> = {
      // K is a relation name like 'posts' or 'profile'
      [K in keyof TAll as NonNullable<TAll[K]> extends any[] | object ? K : never]?: boolean | {
        where?: (record: RelatedModel<NonNullable<TAll[K]>>) => boolean;
        select?: Record<string, ColumnDefinition<unknown>>;
        with?: WithArgument<RelatedModel<NonNullable<TAll[K]>>>;
      };
    };


    type ResolveWith<
      S extends KonroSchema<any, any>,
      TName extends keyof S['tables'],
      TWith extends WithArgument<S['types'][TName]>
    > = {
      // K will be 'posts', 'profile', etc.
      [K in keyof TWith as K extends keyof S['types'][TName] ? K : never]: S['types'][TName][K];
    };



    // --- TYPE-SAFE FLUENT API BUILDERS ---


    interface ChainedQueryBuilder<S extends KonroSchema<any, any>, TName extends
    keyof S['tables'], TReturn> {
      select(fields: Record<string, ColumnDefinition<unknown> | RelationDefinition>): this;
      where(predicate: Partial<S['base'][TName]> | ((record: S['base'][TName]) => boolean)): this;
      with<W extends WithArgument<S['types'][TName]>>(relations: W): ChainedQueryBuilder<S, TName, TReturn & ResolveWith<S, TName, W>>;
      limit(count: number): this;
      offset(count: number): this;
      all(): TReturn[];
      first(): TReturn | null;
      aggregate<TAggs extends Record<string, AggregationDefinition>>(
        aggregations: TAggs
      ): { [K in keyof TAggs]: number | null };
    }


    interface QueryBuilder<S extends KonroSchema<any, any>> {
      from<T extends keyof S['tables']>(tableName: T): ChainedQueryBuilder<S, T, S['base'][T]>;
    }


    interface UpdateBuilder<S extends KonroSchema<any, any>, TBase> {
      set(data: Partial<TBase>): {
        where(predicate: Partial<TBase> | ((record: TBase) => boolean)): [DatabaseState<S>, TBase[]];
      };
    }


    interface DeleteBuilder<S extends KonroSchema<any, any>, TBase> {
      where(predicate: Partial<TBase> | ((record: TBase) => boolean)): [DatabaseState<S>, TBase[]];
    }


    export interface DbContext<S extends KonroSchema<any, any>> {
      schema: S;
      adapter: StorageAdapter;
      read(): Promise<DatabaseState<S>>;
      write(state: DatabaseState<S>): Promise<void>;
      createEmptyState(): DatabaseState<S>;

      query(state: DatabaseState<S>): QueryBuilder<S>;
      insert<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: S['create'][T]): [DatabaseState<S>, S['base'][T]];
      insert<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState<S>, S['base'][T][]];
      update<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): UpdateBuilder<S, S['base'][T]>;
      delete<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): DeleteBuilder<S, S['base'][T]>;
    }


    export const createDatabase = <S extends KonroSchema<any, any>>(options: {
    schema: S, adapter: StorageAdapter }): DbContext<S> => {
      const { schema, adapter } = options;

      return {
        schema,
        adapter,
        read: () => adapter.read(schema),
        write: (state) => adapter.write(state),
        createEmptyState: () => createEmptyStateImpl(schema),

        insert: (<T extends keyof S['tables']>(
          state: DatabaseState<S>,
          tableName: T,
          values: S['create'][T] | Readonly<S['create'][T]>[]
        ): [DatabaseState<S>, S['base'][T] | S['base'][T][]] => {
          const valsArray = Array.isArray(values) ? values : [values];
          const [newState, inserted] = _insertImpl(state as DatabaseState, schema, tableName as string, valsArray as KRecord[]);
          const result = Array.isArray(values) ? inserted : inserted[0];
          return [newState as DatabaseState<S>, result] as [DatabaseState<S>, S['base'][T] | S['base'][T][]];
        }) as {
          <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: S['create'][T]): [DatabaseState<S>, S['base'][T]];
          <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState<S>, S['base'][T][]];
        },

        query: (state: DatabaseState<S>): QueryBuilder<S> => ({
          from: <TName extends keyof S['tables']>(tableName: TName): ChainedQueryBuilder<S, TName, S['base'][TName]> => {
            const createBuilder = <TReturn>(currentDescriptor: QueryDescriptor): ChainedQueryBuilder<S, TName, TReturn> => ({
              select(fields) {
                return createBuilder<TReturn>({ ...currentDescriptor, select: fields });
              },
              where(predicate) {
                return createBuilder<TReturn>({ ...currentDescriptor, where: normalizePredicate(predicate as (record: KRecord) => boolean) });
              },
              with<W extends WithArgument<S['types'][TName]>>(relations: W) {
                const newWith = { ...currentDescriptor.with, ...(relations as QueryDescriptor['with']) };
                return createBuilder<TReturn & ResolveWith<S, TName, W>>({ ...currentDescriptor, with: newWith });
              },
              limit(count) {
                return createBuilder<TReturn>({ ...currentDescriptor, limit: count });
              },
              offset(count) {
                return createBuilder<TReturn>({ ...currentDescriptor, offset: count });
              },
              all: (): TReturn[] => _queryImpl(state as DatabaseState, schema, currentDescriptor) as unknown as TReturn[],
              first: (): TReturn | null => (_queryImpl(state as DatabaseState, schema, { ...currentDescriptor, limit: 1 })[0] ?? null) as unknown as TReturn | null,
              aggregate: <TAggs extends Record<string, AggregationDefinition>>(aggregations: TAggs): { [K in keyof TAggs]: number | null } => {
                const aggDescriptor: AggregationDescriptor = { ...currentDescriptor, aggregations };
                return _aggregateImpl(state as DatabaseState, schema, aggDescriptor) as { [K in keyof TAggs]: number | null };
              },
            });
            return createBuilder<S['base'][TName]>({ tableName: tableName as string });
          },
        }),

        update: <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): UpdateBuilder<S, S['base'][T]> => ({
          set: (data) => ({
            where: (predicate) => {
              const [newState, updatedRecords] = _updateImpl(state as DatabaseState, schema, tableName as string, data as Partial<KRecord>, normalizePredicate(predicate as (record: KRecord) => boolean));
              return [newState as DatabaseState<S>, updatedRecords as S['base'][T][]];
            },
          }),
        }),

        delete: <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): DeleteBuilder<S, S['base'][T]> => ({
          where: (predicate) => {
            const [newState, deletedRecords] = _deleteImpl(state as DatabaseState, tableName as string, normalizePredicate(predicate as (record: KRecord) => boolean));
            return [newState as DatabaseState<S>, deletedRecords as S['base'][T][]];
          },
        }),
      };
    };
approved: true
