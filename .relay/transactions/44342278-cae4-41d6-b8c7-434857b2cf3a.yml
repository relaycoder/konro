uuid: 44342278-cae4-41d6-b8c7-434857b2cf3a
projectId: konro
createdAt: '2025-07-08T14:22:20.513Z'
linesAdded: 2
linesRemoved: 2
gitCommitMsg: 'fix(types): enforce relational integrity to fix recursive type inference'
promptSummary: >-
  User is frustrated by circular fixes. The new approach is a coordinated change
  to `src/schema.ts`: 1. Make `konro.one` and `konro.many` generic to capture
  literal `targetTable` types. 2. Strengthen the type constraint in
  `konro.createSchema` to validate that `targetTable` is a known table key. This
  provides TypeScript with the necessary guarantees to correctly resolve
  recursive relational types.
reasoning:
  - >-
    You are absolutely right to call out the circular reasoning. My previous
    attempts were narrowly focused and failed to address the fundamental issue.
    I've taken a step back to rethink the problem from the ground up.
  - >-
    The core issue lies in how TypeScript understands the relationships you
    define. When you write `konro.many('posts', ...)` inside your schema,
    TypeScript needs to be certain that `'posts'` is a valid table name that it
    can use later to link the types together. My previous fixes failed because
    they didn't provide this certainty, causing the type inference for relations
    to collapse into `{}`, an empty object.
  - >-
    The "out of the box" solution is to make the schema definition itself more
    intelligent. I will implement a coordinated, two-part change in
    `src/schema.ts` that provides the compiler with the guarantees it needs:
  - >-
    1.  **Smarter Relation Helpers**: I will make the `konro.one` and
    `konro.many` functions generic. This will allow them to capture the *exact
    literal type* of the `targetTable` string you pass in (e.g., `'posts'`, not
    just `string`).
  - >-
    2.  **Stricter Schema Validation**: I will update `konro.createSchema` with
    a more powerful type constraint. This new constraint will use the
    information from the smarter helpers to validate that every `targetTable`
    you define corresponds to an actual table in your schema.
  - >-
    This combination gives TypeScript the crucial missing link: the certainty
    that a relation's `targetTable` is a valid key for looking up the related
    model's type. This allows the recursive `Models` type to resolve correctly,
    which will fix all 4 of the current errors.
  - 'Here is the patch for `src/schema.ts`:'
  - '---'
operations:
  - type: write
    path: src/schema.ts
    content: >-
      <<<<<<< SEARCH

      export const createSchema = <
        const TDef extends {
          tables: Record<string, Record<string, ColumnDefinition<any>>>;
          relations?: (tables: TDef['tables']) => Record<string, Record<string, RelationDefinition>>;
        }
      >(
        schemaDef: TDef
      ): KonroSchema<TDef['tables'], TDef['relations'] extends (...args: any) =>
      any ? ReturnType<TDef['relations']> : {}> => {
        const relations = schemaDef.relations ? schemaDef.relations(schemaDef.tables) : {};
        return {
          tables: schemaDef.tables,
          relations: relations as any, // Cast to bypass complex conditional type issue
          // Types are applied via the return type annotation, these are just placeholders at runtime.
          types: {} as any,
          create: {} as any,
        };
      };

      =======

      export const createSchema = <
        const TDef extends {
          tables: Record<string, Record<string, ColumnDefinition<any>>>;
          relations?: (
            tables: TDef['tables']
          ) => {
            [K in keyof TDef['tables']]?: {
              [rel: string]: RelationDefinition & { targetTable: keyof TDef['tables'] };
            };
          };
        }
      >(
        schemaDef: TDef
      ): KonroSchema<TDef['tables'], TDef['relations'] extends (...args: any) =>
      any ? ReturnType<TDef['relations']> : {}> => {
        const relations = schemaDef.relations ? schemaDef.relations(schemaDef.tables) : {};
        return {
          tables: schemaDef.tables,
          relations: relations as any, // Cast to bypass complex conditional type issue
          // Types are applied via the return type annotation, these are just placeholders at runtime.
          types: {} as any,
          create: {} as any,
        };
      };

      >>>>>>> REPLACE

      <<<<<<< SEARCH

      /** Defines a `one-to-one` or `many-to-one` relationship. */

      export const one = (targetTable: string, options: { on: string;
      references: string }): OneRelationDefinition => ({
        _type: 'relation',
        relationType: 'one',
        targetTable,
        ...options,
      });


      /** Defines a `one-to-many` relationship. */

      export const many = (targetTable: string, options: { on: string;
      references: string }): ManyRelationDefinition => ({
        _type: 'relation',
        relationType: 'many',
        targetTable,
        ...options,
      });

      =======

      /** Defines a `one-to-one` or `many-to-one` relationship. */

      export const one = <T extends string>(targetTable: T, options: { on:
      string; references: string }): OneRelationDefinition & { targetTable: T }
      => ({
        _type: 'relation',
        relationType: 'one',
        targetTable,
        ...options,
      });


      /** Defines a `one-to-many` relationship. */

      export const many = <T extends string>(targetTable: T, options: { on:
      string; references: string }): ManyRelationDefinition & { targetTable: T }
      => ({
        _type: 'relation',
        relationType: 'many',
        targetTable,
        ...options,
      });

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/schema.ts: >-
    //

    // Konro: The Type-Safe, Functional ORM for JSON/YAML

    //

    // ## Pillar I: The Recipe (Schema Definition)

    //

    // This file contains the core logic for defining a database schema. It is
    designed to be

    // both the runtime source of truth for validation and the static source of
    truth for

    // TypeScript types. By using phantom types and inference, we can create a
    fully-typed

    // `db` object from a single schema definition object, eliminating the need
    for manual

    // type declarations (`interface User { ... }`) and ensuring they never get
    out of sync.

    //


    // --- TYPE INFERENCE HELPERS ---


    /** Infers the underlying TypeScript type from a `ColumnDefinition`. e.g.,
    `ColumnDefinition<string>` => `string`. */

    type InferColumnType<C> = C extends ColumnDefinition<infer T> ? T : never;


    /** A mapping of table names to their base model types (columns only, no
    relations). */

    export type BaseModels<TTables extends Record<string, any>> = {
      [TableName in keyof TTables]: {
        [ColumnName in keyof TTables[TableName]]: InferColumnType<TTables[TableName][ColumnName]>;
      };
    };


    /**
     * A mapping of table names to their full model types, including relations.
     * This is a recursive type that resolves relationships to other full models.
     */
    type Models<
      TTables extends Record<string, any>,
      TRelations extends Record<string, any>,
      TBaseModels extends Record<keyof TTables, any>
    > = {
      [TableName in keyof TTables]: TBaseModels[TableName] &
        (TableName extends keyof TRelations
          ? {
              [RelationName in keyof TRelations[TableName]]?: TRelations[TableName][RelationName] extends OneRelationDefinition
                ? // `targetTable` is a string literal, so we can use it to index `Models`
                  Models<TTables, TRelations, TBaseModels>[TRelations[TableName][RelationName]['targetTable']] | null
                : TRelations[TableName][RelationName] extends ManyRelationDefinition
                ? Models<TTables, TRelations, TBaseModels>[TRelations[TableName][RelationName]['targetTable']][]
                : never;
            }
          : {});
    };


    /** Finds all column names in a table definition that are optional for
    insertion (i.e., `id` or has a `default`). */

    /** Finds all column names in a table definition that are optional for
    insertion (i.e., `id` or has a `default`). */

    type OptionalCreateKeys<TTableDef> = {
      [K in keyof TTableDef]: TTableDef[K] extends { dataType: 'id' }
        ? K
        : TTableDef[K] extends { options: { default: any } }
        ? K
        : never;
    }[keyof TTableDef];


    /**
     * A mapping of table names to their "create" types, used for `db.insert`.
     * It takes the base model, makes keys with defaults optional, and removes the `id` field.
     */
    type CreateModels<
      TTables extends Record<string, any>,
      TBaseModels extends Record<keyof TTables, any>
    > = {
      [TableName in keyof TTables]: Omit<
        {
          // Required fields
          [K in Exclude<keyof TBaseModels[TableName], OptionalCreateKeys<TTables[TableName]>>]: TBaseModels[TableName][K];
        } & {
          // Optional fields
          [K in OptionalCreateKeys<TTables[TableName]>]?: TBaseModels[TableName][K];
        },
        // 'id' is always omitted from create types
        'id'
      >;
    };



    // --- PUBLIC API TYPES ---


    /** The publicly exposed structure of a fully-processed Konro schema. */

    export interface KonroSchema<
      TTables extends Record<string, any>,
      TRelations extends Record<string, any>
    > {
      tables: TTables;
      relations: TRelations;
      types: Models<TTables, TRelations, BaseModels<TTables>>;
      create: CreateModels<TTables, BaseModels<TTables>>;
    }


    /** The definition for a database column, created by helpers like
    `konro.string()`. */

    export interface ColumnDefinition<T> {
      readonly _type: 'column';
      readonly dataType: 'id' | 'string' | 'number' | 'boolean' | 'date' | 'object';
      readonly options: any;
      readonly _tsType: T; // Phantom type, does not exist at runtime
    }


    /** The definition for a table relationship, created by `konro.one()` or
    `konro.many()`. */

    interface BaseRelationDefinition {
      readonly _type: 'relation';
      readonly targetTable: string;
      readonly on: string;
      readonly references: string;
    }


    interface OneRelationDefinition extends BaseRelationDefinition {
      readonly relationType: 'one';
    }


    interface ManyRelationDefinition extends BaseRelationDefinition {
      readonly relationType: 'many';
    }


    export type RelationDefinition = OneRelationDefinition |
    ManyRelationDefinition;


    /** The definition for a data aggregation, created by `konro.count()`,
    `konro.sum()`, etc. */

    export interface AggregationDefinition {
      readonly _type: 'aggregation';
      readonly aggType: 'count' | 'sum' | 'avg' | 'min' | 'max';
      readonly column?: string;
    }



    // --- SCHEMA BUILDER FUNCTION ---


    /**
     * Defines the structure, types, and relations of your database.
     * This is the single source of truth for both runtime validation and static types.
     *
     * @param schemaDef The schema definition object.
     * @returns A processed schema object with inferred types attached.
     */
    export const createSchema = <
      const TDef extends {
        tables: Record<string, Record<string, ColumnDefinition<any>>>;
        relations?: (tables: TDef['tables']) => Record<string, Record<string, BaseRelationDefinition>>;
      }
    >(
      schemaDef: TDef
    ): KonroSchema<TDef['tables'], TDef['relations'] extends (...args: any) =>
    any ? ReturnType<TDef['relations']> : {}> => {
      const relations = schemaDef.relations ? schemaDef.relations(schemaDef.tables) : {};
      return {
        tables: schemaDef.tables,
        relations: relations as any, // Cast to bypass complex conditional type issue
        // Types are applied via the return type annotation, these are just placeholders at runtime.
        types: {} as any,
        create: {} as any,
      };
    };



    // --- COLUMN DEFINITION HELPERS ---


    const createColumn = <T>(dataType: ColumnDefinition<T>['dataType'],
    options?: object): ColumnDefinition<T> => ({
      _type: 'column',
      dataType,
      options: options ?? {},
      // This is a "phantom type", it holds the TypeScript type for inference but is undefined at runtime.
      _tsType: undefined as T,
    });


    /** A managed, auto-incrementing integer primary key. */

    export const id = () => createColumn<number>('id');

    /** A string column with optional validation. */

    export const string = (options?: { unique?: boolean; default?: string | (()
    => string); min?: number; max?: number; format?: 'email' | 'uuid' | 'url' })
    => createColumn<string>('string', options);

    /** A number column with optional validation. */

    export const number = (options?: { unique?: boolean; default?: number | (()
    => number); min?: number; max?: number; type?: 'integer' }) =>
    createColumn<number>('number', options);

    /** A boolean column. */

    export const boolean = (options?: { default?: boolean | (() => boolean) })
    => createColumn<boolean>('boolean', options);

    /** A date column, stored as an ISO string but hydrated as a Date object. */

    export const date = (options?: { default?: Date | (() => Date) }) =>
    createColumn<Date>('date', options);

    /** A column for storing arbitrary JSON objects, with a generic for type
    safety. */

    export const object = <T extends Record<string, any>>(options?: { default?:
    T | (() => T) }) => createColumn<T>('object', options);



    // --- RELATIONSHIP DEFINITION HELPERS ---


    /** Defines a `one-to-one` or `many-to-one` relationship. */

    export const one = (targetTable: string, options: { on: string; references:
    string }): OneRelationDefinition => ({
      _type: 'relation',
      relationType: 'one',
      targetTable,
      ...options,
    });


    /** Defines a `one-to-many` relationship. */

    export const many = (targetTable: string, options: { on: string; references:
    string }): ManyRelationDefinition => ({
      _type: 'relation',
      relationType: 'many',
      targetTable,
      ...options,
    });



    // --- AGGREGATION DEFINITION HELPERS ---


    /** Aggregation to count records. */

    export const count = (): AggregationDefinition => ({ _type: 'aggregation',
    aggType: 'count' });

    /** Aggregation to sum a numeric column. */

    export const sum = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'sum', column });

    /** Aggregation to average a numeric column. */

    export const avg = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'avg', column });

    /** Aggregation to find the minimum value in a numeric column. */

    export const min = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'min', column });

    /** Aggregation to find the maximum value in a numeric column. */

    export const max = (column: string): AggregationDefinition => ({ _type:
    'aggregation', aggType: 'max', column });
approved: true
