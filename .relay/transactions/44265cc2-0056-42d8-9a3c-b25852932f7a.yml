uuid: 44265cc2-0056-42d8-9a3c-b25852932f7a
projectId: konro
createdAt: '2025-07-08T15:49:42.636Z'
linesAdded: 3
linesRemoved: 5
gitCommitMsg: 'fix(types): Correct complex recursive types in query builder'
promptSummary: >-
  Fix TypeScript errors in `src/db.ts` related to duplicate identifiers and
  complex recursive types.
reasoning:
  - >-
    I've identified and will fix the TypeScript errors in `src/db.ts`. The
    errors stem from two main issues:
  - >-
    1.  A typo in a type definition created a "duplicate identifier" for a
    property named `with`, which I will correct.
  - >-
    2.  TypeScript's type-checker is struggling with a complex, recursive type
    (`ResolveWith`). It cannot verify that an inferred type parameter
    (`TNestedWith`) satisfies its generic constraint during the recursive call.
    I will resolve this by using a type intersection, which is a safe way to
    provide the necessary type information to the compiler without losing type
    safety.
  - 'Here are the changes for `src/db.ts`:'
operations:
  - type: write
    path: src/db.ts
    content: >-
      --- src/db.ts

      +++ src/db.ts

      @@ -23,8 +23,7 @@
         [K in keyof TAll as NonNullable<TAll[K]> extends any[] | object ? K : never]?: boolean | ({
           where?: (record: RelatedModel<NonNullable<TAll[K]>>) => boolean;
         } & (
      -    | { select: Record<string, ColumnDefinition<unknown>>;

      -    with?: WithArgument<RelatedModel<NonNullable<TAll[K]>>>; with?: never
      }

      +    | { select: Record<string, ColumnDefinition<unknown>>; with?: never }
           | { select?: never; with?: WithArgument<RelatedModel<NonNullable<TAll[K]>>> }
         ));
       };
      @@ -40,10 +39,8 @@
                       TWith[K] extends { select: infer TSelect }
                           ? ({ [P in keyof TSelect]: InferColumnType<TSelect[P]> })[]
                           : TWith[K] extends { with: infer TNestedWith }
      -                        // posts: { with: { author: true } }. TNestedWith
      = { author: true }
                               // S['relations']['users']['posts']['targetTable'] = 'posts'
      -                        ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith>)[]

      +                        ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith &
      WithArgument<S['types'][S['relations'][TName][K]['targetTable']]>>)[]
                               // posts: true.
                               : S['base'][S['relations'][TName][K]['targetTable']][]
                     )
      @@ -50,8 +47,8 @@
                           TWith[K] extends { select: infer TSelect }
                               ? ({ [P in keyof TSelect]: InferColumnType<TSelect[P]> }) | null
                               : TWith[K] extends { with: infer TNestedWith }
      -                            ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith>) | null

      +                            ?
      (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S,
      S['relations'][TName][K]['targetTable'], TNestedWith &
      WithArgument<S['types'][S['relations'][TName][K]['targetTable']]>>) | null
                                   : S['base'][S['relations'][TName][K]['targetTable']] | null
                         )
                       : never
    patchStrategy: new-unified
snapshot:
  src/db.ts: >-
    import { AggregationDefinition, ColumnDefinition, KonroSchema,
    RelationDefinition } from './schema';

    import { StorageAdapter } from './adapter';

    import { DatabaseState, KRecord } from './types';

    import { _queryImpl, _insertImpl, _updateImpl, _deleteImpl, createEmptyState
    as createEmptyStateImpl, QueryDescriptor, _aggregateImpl,
    AggregationDescriptor } from './operations';

    import { createPredicateFromPartial } from './utils/predicate.util';


    // A helper to normalize a predicate argument

    const normalizePredicate = <T extends KRecord>(
      predicate: Partial<T> | ((record: T) => boolean)
    ): ((record: KRecord) => boolean) =>
      // The cast is necessary due to function argument contravariance.
      // The internal operations work on the wider `KRecord`, while the fluent API provides the specific `T`.
      (typeof predicate === 'function' ? predicate : createPredicateFromPartial(predicate)) as (record: KRecord) => boolean;

    // --- TYPE HELPERS for Fluent API ---


    type RelatedModel<T> = T extends (infer R)[] ? R : T extends (infer R |
    null) ? R : T;


    // TAll is the full relational model type, e.g. schema.types.users

    type WithArgument<TAll> = { // e.g. TAll = S['types']['users']
      [K in keyof TAll as NonNullable<TAll[K]> extends any[] | object ? K : never]?: boolean | ({
        where?: (record: RelatedModel<NonNullable<TAll[K]>>) => boolean;
      } & (
        | { select: Record<string, ColumnDefinition<unknown>>;
        with?: WithArgument<RelatedModel<NonNullable<TAll[K]>>>; with?: never }
        | { select?: never; with?: WithArgument<RelatedModel<NonNullable<TAll[K]>>> }
      ));
    };


    type ResolveWith<
      S extends KonroSchema<any, any>,
      TName extends keyof S['tables'],
      TWith extends WithArgument<S['types'][TName]>
    > = { // TName='users', TWith={posts: {with: {author: true}}}
        [K in keyof TWith & keyof S['relations'][TName]]:
            S['relations'][TName][K] extends { relationType: 'many' }
                ? ( // 'many' relation -> array result. K = 'posts'
                    TWith[K] extends { select: infer TSelect }
                        ? ({ [P in keyof TSelect]: InferColumnType<TSelect[P]> })[]
                        : TWith[K] extends { with: infer TNestedWith }
                            // posts: { with: { author: true } }. TNestedWith = { author: true }
                            // S['relations']['users']['posts']['targetTable'] = 'posts'
                            ? (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S, S['relations'][TName][K]['targetTable'], TNestedWith>)[]
                            // posts: true.
                            : S['base'][S['relations'][TName][K]['targetTable']][]
                  )
                : S['relations'][TName][K] extends { relationType: 'one' }
                    ? ( // 'one' relation -> nullable object result
                        TWith[K] extends { select: infer TSelect }
                            ? ({ [P in keyof TSelect]: InferColumnType<TSelect[P]> }) | null
                            : TWith[K] extends { with: infer TNestedWith }
                                ? (S['base'][S['relations'][TName][K]['targetTable']] & ResolveWith<S, S['relations'][TName][K]['targetTable'], TNestedWith>) | null
                                : S['base'][S['relations'][TName][K]['targetTable']] | null
                      )
                    : never
    };


    // InferColumnType is not exported from schema, so we need it here too.

    type InferColumnType<C> = C extends ColumnDefinition<infer T> ? T : never;


    // --- TYPE-SAFE FLUENT API BUILDERS ---


    interface ChainedQueryBuilder<S extends KonroSchema<any, any>, TName extends
    keyof S['tables'], TReturn> {
      select(fields: Record<string, ColumnDefinition<unknown> | RelationDefinition>): this;
      where(predicate: Partial<S['base'][TName]> | ((record: S['base'][TName]) => boolean)): this;
      with<W extends WithArgument<S['types'][TName]>>(relations: W): ChainedQueryBuilder<S, TName, TReturn & ResolveWith<S, TName, W>>;
      limit(count: number): this;
      offset(count: number): this;
      all(): TReturn[];
      first(): TReturn | null;
      aggregate<TAggs extends Record<string, AggregationDefinition>>(
        aggregations: TAggs
      ): { [K in keyof TAggs]: number | null };
    }


    interface QueryBuilder<S extends KonroSchema<any, any>> {
      from<T extends keyof S['tables']>(tableName: T): ChainedQueryBuilder<S, T, S['base'][T]>;
    }


    interface UpdateBuilder<S extends KonroSchema<any, any>, TBase> {
      set(data: Partial<TBase>): {
        where(predicate: Partial<TBase> | ((record: TBase) => boolean)): [DatabaseState<S>, TBase[]];
      };
    }


    interface DeleteBuilder<S extends KonroSchema<any, any>, TBase> {
      where(predicate: Partial<TBase> | ((record: TBase) => boolean)): [DatabaseState<S>, TBase[]];
    }


    export interface DbContext<S extends KonroSchema<any, any>> {
      schema: S;
      adapter: StorageAdapter;
      read(): Promise<DatabaseState<S>>;
      write(state: DatabaseState<S>): Promise<void>;
      createEmptyState(): DatabaseState<S>;

      query(state: DatabaseState<S>): QueryBuilder<S>;
      insert<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: S['create'][T]): [DatabaseState<S>, S['base'][T]];
      insert<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState<S>, S['base'][T][]];
      update<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): UpdateBuilder<S, S['base'][T]>;
      delete<T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): DeleteBuilder<S, S['base'][T]>;
    }


    export const createDatabase = <S extends KonroSchema<any, any>>(options: {
    schema: S, adapter: StorageAdapter }): DbContext<S> => {
      const { schema, adapter } = options;

      return {
        schema,
        adapter,
        read: () => adapter.read(schema),
        write: (state) => adapter.write(state),
        createEmptyState: () => createEmptyStateImpl(schema),

        insert: (<T extends keyof S['tables']>(
          state: DatabaseState<S>,
          tableName: T,
          values: S['create'][T] | Readonly<S['create'][T]>[]
        ): [DatabaseState<S>, S['base'][T] | S['base'][T][]] => {
          const valsArray = Array.isArray(values) ? values : [values];
          const [newState, inserted] = _insertImpl(state as DatabaseState, schema, tableName as string, valsArray as KRecord[]);
          const result = Array.isArray(values) ? inserted : inserted[0];
          return [newState as DatabaseState<S>, result] as [DatabaseState<S>, S['base'][T] | S['base'][T][]];
        }) as {
          <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: S['create'][T]): [DatabaseState<S>, S['base'][T]];
          <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T, values: Readonly<S['create'][T]>[]): [DatabaseState<S>, S['base'][T][]];
        },

        query: (state: DatabaseState<S>): QueryBuilder<S> => ({
          from: <TName extends keyof S['tables']>(tableName: TName): ChainedQueryBuilder<S, TName, S['base'][TName]> => {
            const createBuilder = <TReturn>(currentDescriptor: QueryDescriptor): ChainedQueryBuilder<S, TName, TReturn> => ({
              select(fields) {
                return createBuilder<TReturn>({ ...currentDescriptor, select: fields });
              },
              where(predicate) {
                return createBuilder<TReturn>({ ...currentDescriptor, where: normalizePredicate(predicate as (record: KRecord) => boolean) });
              },
              with<W extends WithArgument<S['types'][TName]>>(relations: W) {
                const newWith = { ...currentDescriptor.with, ...(relations as QueryDescriptor['with']) };
                return createBuilder<TReturn & ResolveWith<S, TName, W>>({ ...currentDescriptor, with: newWith });
              },
              limit(count) {
                return createBuilder<TReturn>({ ...currentDescriptor, limit: count });
              },
              offset(count) {
                return createBuilder<TReturn>({ ...currentDescriptor, offset: count });
              },
              all: (): TReturn[] => _queryImpl(state as DatabaseState, schema, currentDescriptor) as unknown as TReturn[],
              first: (): TReturn | null => (_queryImpl(state as DatabaseState, schema, { ...currentDescriptor, limit: 1 })[0] ?? null) as unknown as TReturn | null,
              aggregate: <TAggs extends Record<string, AggregationDefinition>>(aggregations: TAggs): { [K in keyof TAggs]: number | null } => {
                const aggDescriptor: AggregationDescriptor = { ...currentDescriptor, aggregations };
                return _aggregateImpl(state as DatabaseState, schema, aggDescriptor) as { [K in keyof TAggs]: number | null };
              },
            });
            return createBuilder<S['base'][TName]>({ tableName: tableName as string });
          },
        }),

        update: <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): UpdateBuilder<S, S['base'][T]> => ({
          set: (data) => ({
            where: (predicate) => {
              const [newState, updatedRecords] = _updateImpl(state as DatabaseState, schema, tableName as string, data as Partial<KRecord>, normalizePredicate(predicate as (record: KRecord) => boolean));
              return [newState as DatabaseState<S>, updatedRecords as S['base'][T][]];
            },
          }),
        }),

        delete: <T extends keyof S['tables']>(state: DatabaseState<S>, tableName: T): DeleteBuilder<S, S['base'][T]> => ({
          where: (predicate) => {
            const [newState, deletedRecords] = _deleteImpl(state as DatabaseState, tableName as string, normalizePredicate(predicate as (record: KRecord) => boolean));
            return [newState as DatabaseState<S>, deletedRecords as S['base'][T][]];
          },
        }),
      };
    };
approved: true
