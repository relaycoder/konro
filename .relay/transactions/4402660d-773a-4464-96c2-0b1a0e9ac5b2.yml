uuid: 4402660d-773a-4464-96c2-0b1a0e9ac5b2
projectId: konro
createdAt: '2025-07-07T05:00:37.275Z'
gitCommitMsg: 'fix(schema): Correct types in schema helper functions'
promptSummary: Fix TypeScript errors in src/schema.ts.
reasoning:
  - >-
    I've identified two type errors in `src/schema.ts` that are causing the
    TypeScript compilation to fail. I will correct them.
  - >-
    1.  In the `string` schema helper, there's a typo in the type name for its
    options. It's written as `StringStringColumnOptions` instead of
    `StringColumnOptions`.
  - >-
    2.  In the `boolean` schema helper, the options parameter was likely
    copy-pasted from the `number` helper and is incorrectly typed as
    `NumberColumnOptions`. This causes a type mismatch because a number's
    default value cannot be used for a boolean column. I will change it to the
    correct type, `ColumnOptions<boolean>`.
  - 'Here are the precise changes:'
operations:
  - type: write
    path: src/schema.ts
    content: >-
      <<<<<<< SEARCH

      export const string = (options?: StringStringColumnOptions):
      ColumnDefinition<string> => ({ _type: 'column', dataType: 'string',
      options, _tsType: '' });

      =======

      export const string = (options?: StringColumnOptions):
      ColumnDefinition<string> => ({ _type: 'column', dataType: 'string',
      options, _tsType: '' });

      >>>>>>> REPLACE

      <<<<<<< SEARCH

      export const boolean = (options?: NumberColumnOptions):
      ColumnDefinition<boolean> => ({ _type: 'column', dataType: 'boolean',
      options, _tsType: false });

      =======

      export const boolean = (options?: ColumnOptions<boolean>):
      ColumnDefinition<boolean> => ({ _type: 'column', dataType: 'boolean',
      options, _tsType: false });

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/schema.ts: >
    // --- TYPE UTILITIES ---

    type Pretty<T> = { [K in keyof T]: T[K] } & {};


    // --- CORE DEFINITIONS ---


    export interface ColumnOptions<T> {
      unique?: boolean;
      default?: T | (() => T);
    }


    export interface StringColumnOptions extends ColumnOptions<string> {
      min?: number;
      max?: number;
      format?: 'email' | 'uuid' | 'url';
    }


    export interface NumberColumnOptions extends ColumnOptions<number> {
      min?: number;
      max?: number;
      type?: 'integer';
    }


    export interface ColumnDefinition<T> {
      _type: 'column';
      dataType: 'id' | 'string' | 'number' | 'boolean' | 'date' | 'object';
      options?: ColumnOptions<T>;
      _tsType: T; // For TypeScript inference only
    }


    export interface RelationDefinition {
      _type: 'relation';
      relationType: 'one' | 'many';
      targetTable: string;
      on: string;
      references: string;
    }


    // --- TYPE INFERENCE MAGIC ---


    type BaseModels<TTables extends Record<string, Record<string,
    ColumnDefinition<any>>>> = {
      [TableName in keyof TTables]: {
        [ColumnName in keyof TTables[TableName]]: TTables[TableName][ColumnName]['_tsType'];
      };
    };


    type WithRelations<
      TBaseModels extends Record<string, any>,
      TRelations extends Record<string, Record<string, RelationDefinition>>
    > = {
        [TableName in keyof TBaseModels]: TBaseModels[TableName] & (TableName extends keyof TRelations ? {
          [RelationName in keyof TRelations[TableName]]?: TRelations[TableName][RelationName]['relationType'] extends 'one'
          ? TBaseModels[TRelations[TableName][RelationName]['targetTable']] | null
          : TBaseModels[TRelations[TableName][RelationName]['targetTable']][];
        } : {});
      };

    export interface KonroSchema<
      TTables extends Record<string, Record<string, ColumnDefinition<any>>>,
      TRelations extends Record<string, Record<string, RelationDefinition>>
    > {
      tables: TTables;
      relations: TRelations;
      types: Pretty<WithRelations<BaseModels<TTables>, TRelations>>;
    }


    // --- SCHEMA HELPERS ---


    export const id = (): ColumnDefinition<number> => ({ _type: 'column',
    dataType: 'id', options: { unique: true }, _tsType: 0 });

    export const string = (options?: StringStringColumnOptions):
    ColumnDefinition<string> => ({ _type: 'column', dataType: 'string', options,
    _tsType: '' });

    export const number = (options?: NumberColumnOptions):
    ColumnDefinition<number> => ({ _type: 'column', dataType: 'number', options,
    _tsType: 0 });

    export const boolean = (options?: NumberColumnOptions):
    ColumnDefinition<boolean> => ({ _type: 'column', dataType: 'boolean',
    options, _tsType: false });

    export const date = (options?: ColumnOptions<Date>): ColumnDefinition<Date>
    => ({ _type: 'column', dataType: 'date', options, _tsType: new Date() });

    export const object = <T extends Record<string, any>>(options?:
    ColumnOptions<T>): ColumnDefinition<T> => ({ _type: 'column', dataType:
    'object', options, _tsType: {} as T });


    export const one = (targetTable: string, options: { on: string; references:
    string }): RelationDefinition => ({ _type: 'relation', relationType: 'one',
    targetTable, ...options });

    export const many = (targetTable: string, options: { on: string; references:
    string }): RelationDefinition => ({ _type: 'relation', relationType: 'many',
    targetTable, ...options });


    // --- SCHEMA BUILDER ---


    type SchemaInputDef<T> = {
      tables: T;
      relations?: (tables: T) => Record<string, Record<string, RelationDefinition>>;
    };


    export function createSchema<const TDef extends
    SchemaInputDef<Record<string, Record<string,
    ColumnDefinition<any>>>>>(definition: TDef) {
      const relations = definition.relations ? definition.relations(definition.tables) : {};
      return {
        tables: definition.tables,
        relations,
        types: null as any, // This is a runtime placeholder for the inferred types
      } as KonroSchema<
        TDef['tables'],
        TDef['relations'] extends (...args: any) => any ? ReturnType<TDef['relations']> : {}
      >;
    }
approved: true
