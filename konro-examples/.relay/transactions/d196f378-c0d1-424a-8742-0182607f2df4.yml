uuid: d196f378-c0d1-424a-8742-0182607f2df4
projectId: konro-examples
createdAt: '2025-07-09T20:20:45.267Z'
linesAdded: 590
linesRemoved: 4
gitCommitMsg: 'feat: add comprehensive test suite for konro'
promptSummary: >-
  Set up a comprehensive test suite for the Konro library using Bun, covering
  all features in the README with unit, integration, and e2e tests.
reasoning:
  - >-
    Here is the setup for a comprehensive test suite for `konro`. I've
    structured the tests into unit, integration, and end-to-end categories to
    thoroughly verify all features described in the README.
  - >-
    First, I'll update `package.json` to include `konro` and its optional
    dependencies for testing, along with a script to run the tests.
  - >-
    Next, I'll adjust `tsconfig.json` to correctly include all test files for
    type checking.
  - >-
    Now, I'll create a reusable utility file for our tests. This will contain a
    shared schema definition and helper functions to set up and tear down
    temporary database instances, ensuring our tests are isolated and don't
    leave artifacts.
  - >-
    I'll add unit tests to verify schema creation logic and the behavior of pure
    in-memory operations, which form the core of Konro's engine.
  - >-
    Integration tests will verify that different components—the API, the engine,
    and the file adapters—work together correctly. I'll test both `in-memory`
    and `on-demand` modes, as well as complex relationship handling.
  - >-
    Finally, E2E tests will validate different storage formats and strategies,
    ensuring Konro is robust across its various configurations.
operations:
  - type: write
    path: package.json
    content: |-
      <<<<<<< SEARCH
      {
        "name": "konro-examples",
        "module": "index.ts",
        "type": "module",
        "devDependencies": {
          "@types/bun": "latest"
        },
        "peerDependencies": {
          "typescript": "^5"
        }
      }
      =======
      {
        "name": "konro-testing",
        "module": "index.ts",
        "type": "module",
        "scripts": {
          "test": "bun test"
        },
        "devDependencies": {
          "@types/bun": "latest",
          "js-yaml": "^4.1.0",
          "konro": "latest",
          "papaparse": "^5.4.1",
          "xlsx": "https://cdn.sheetjs.com/xlsx-0.20.2/xlsx-0.20.2.tgz",
          "@types/js-yaml": "^4.0.9",
          "@types/papaparse": "^5.3.14"
        },
        "peerDependencies": {
          "typescript": "^5.0.0"
        }
      }
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: tsconfig.json
    content: |-
      <<<<<<< SEARCH
        "include": ["test"],
        "exclude": ["dist"]
      }
      =======
        "include": ["test", "index.ts"],
        "exclude": ["dist"]
      }
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: test/test.util.ts
    content: >-
      import { konro, type FileAdapterOptions, type Database } from 'konro';

      import { rm } from 'node:fs/promises';

      import { join } from 'node:path';

      import { tmpdir } from 'node:os';


      // A comprehensive schema for testing various features

      export const testSchema = konro.createSchema({
        tables: {
          users: {
            id: konro.id(),
            name: konro.string({ min: 2 }),
            email: konro.string({ format: 'email', unique: true }),
            profileId: konro.number({ unique: true, nullable: true }),
            createdAt: konro.createdAt(),
            deletedAt: konro.deletedAt(),
          },
          profiles: {
            id: konro.id(),
            bio: konro.string(),
            userId: konro.number({ unique: true }),
          },
          posts: {
            id: konro.id(),
            title: konro.string({ min: 5 }),
            content: konro.string(),
            published: konro.boolean({ default: false }),
            views: konro.number({ default: 0 }),
            authorId: konro.number({ type: 'integer' }),
            coAuthorId: konro.number({ type: 'integer', nullable: true }),
            createdAt: konro.createdAt(),
            updatedAt: konro.updatedAt(),
          },
          categories: {
              id: konro.id(),
              name: konro.string({ unique: true }),
          },
          posts_to_categories: {
              id: konro.id(),
              postId: konro.number(),
              categoryId: konro.number(),
          }
        },
        relations: (t) => ({
          users: {
            profile: konro.one('profiles', { on: 'profileId', references: 'id', onDelete: 'SET NULL' }),
            posts: konro.many('posts', { on: 'id', references: 'authorId', onDelete: 'CASCADE' }),
            coAuthoredPosts: konro.many('posts', { on: 'id', references: 'coAuthorId', onDelete: 'SET NULL' }),
          },
          profiles: {
              user: konro.one('users', { on: 'userId', references: 'id' }),
          },
          posts: {
            author: konro.one('users', { on: 'authorId', references: 'id' }),
            coAuthor: konro.one('users', { on: 'coAuthorId', references: 'id'}),
          },
        }),
      });


      export type User = typeof testSchema.types.users;

      export type Post = typeof testSchema.types.posts;

      export type Profile = typeof testSchema.types.profiles;

      export type Category = typeof testSchema.types.categories;

      export type PostsToCategory = typeof testSchema.types.posts_to_categories;


      export const setupTestDb = async (adapterOptions: FileAdapterOptions):
      Promise<{ db: Database<typeof testSchema>; testDir: string }> => {
        const testDir = join(tmpdir(), `konro-test-${Date.now()}-${Math.random()}`);
        
        let finalAdapterOptions: FileAdapterOptions;

        if ('single' in adapterOptions && adapterOptions.single) {
          finalAdapterOptions = { ...adapterOptions, single: { filepath: join(testDir, adapterOptions.single.filepath) } };
        } else {
          // multi or perRecord
          const dirKey = ('multi' in adapterOptions && adapterOptions.multi) ? 'multi' : 'perRecord';
          const config = ('multi' in adapterOptions && adapterOptions.multi) ? adapterOptions.multi : adapterOptions.perRecord;
          
          finalAdapterOptions = { ...adapterOptions, [dirKey]: { ...config, dir: testDir } };
        }

        const adapter = konro.createFileAdapter(finalAdapterOptions);
        const db = konro.createDatabase({ schema: testSchema, adapter });

        return { db, testDir };
      };


      export const cleanupTestDb = async (testDir: string | undefined) => {
        if (testDir) {
          await rm(testDir, { recursive: true, force: true });
        }
      };
    patchStrategy: replace
  - type: write
    path: test/unit/schema.test.ts
    content: |-
      import { describe, it, expect } from 'bun:test';
      import { konro } from 'konro';

      describe('Unit: Schema Definition', () => {
        it('should create a valid schema object with tables and relations', () => {
          const schema = konro.createSchema({
            tables: {
              users: { id: konro.id(), name: konro.string() },
              posts: { id: konro.id(), title: konro.string(), authorId: konro.number() },
            },
            relations: (t) => ({
              users: { posts: konro.many('posts', { on: 'id', references: 'authorId' }) },
              posts: { author: konro.one('users', { on: 'authorId', references: 'id' }) },
            }),
          });

          expect(schema).toBeDefined();
          expect(schema.tables.users).toBeDefined();
          expect(schema.tables.posts).toBeDefined();
          expect(schema.relations.users.posts).toBeDefined();
          expect(schema.relations.posts.author).toBeDefined();
        });

        it('should provide inferred types placeholders', () => {
          const schema = konro.createSchema({ tables: { users: { id: konro.id(), name: konro.string() } } });
          
          type User = typeof schema.types.users;
          
          // This is a compile-time check. If this compiles, the test passes.
          const user: User = { id: 1, name: 'Test' };
          expect(user.id).toBe(1);
          
          // The runtime value is just an empty proxy object.
          expect(Object.keys(schema.types.users)).toEqual([]);
        });

        it('should throw an error for a relation to a non-existent table', () => {
          expect(() => {
              konro.createSchema({
                  tables: { users: { id: konro.id() } },
                  relations: (t) => ({
                      users: { posts: konro.many('posts', { on: 'id', references: 'authorId'}) }
                  })
              })
          }).toThrow('Relation "posts" on table "users" points to a non-existent table "posts"');
        });

        it('should throw an error for a relation with non-existent columns', () => {
          expect(() => {
              konro.createSchema({
                  tables: { 
                      users: { id: konro.id() },
                      posts: { id: konro.id() }
                  },
                  relations: (t) => ({
                      posts: { author: konro.one('users', { on: 'author_id', references: 'id'}) }
                  })
              })
          }).toThrow('Foreign key "author_id" in relation "author" does not exist on table "posts"');
        });
      });
    patchStrategy: replace
  - type: write
    path: test/unit/in-memory-ops.test.ts
    content: |-
      import { describe, it, expect, beforeEach } from 'bun:test';
      import { konro } from 'konro';
      import { testSchema, type Post } from '../test.util';

      const db = konro.createDatabase({
        schema: testSchema,
        adapter: konro.createFileAdapter({
          format: 'json',
          single: { filepath: 'dummy.json' },
          mode: 'in-memory',
        }),
      });

      describe('Unit: In-Memory Operations (Pure Functions)', () => {
        let state: ReturnType<typeof db.createEmptyState>;

        beforeEach(() => {
          state = db.createEmptyState();
        });

        it('should insert a record and set createdAt timestamp', () => {
          const userToInsert = { name: 'Unit Tester', email: 'unit@test.dev' };
          const [newState, newUser] = db.insert(state, 'users', userToInsert);

          expect(newUser.id).toBe(1);
          expect(newUser.name).toBe(userToInsert.name);
          expect(newUser.createdAt).toBeInstanceOf(Date);
          expect(newUser.deletedAt).toBe(null);

          const usersInState = db.query(newState).from('users').all();
          expect(usersInState).toHaveLength(1);
          expect(usersInState[0]).toEqual(newUser);
        });
        
        it('should update a record and set updatedAt timestamp', async () => {
          const [stateAfterInsert, user] = db.insert(state, 'users', { name: 'Initial', email: 'initial@test.dev' });
          const [stateWithPost, post] = db.insert(stateAfterInsert, 'posts', { title: 'First Post', authorId: user.id, content: '...' });
          
          const originalUpdatedAt = post.updatedAt;
          expect(originalUpdatedAt).toBeInstanceOf(Date);

          await new Promise(resolve => setTimeout(resolve, 10));
          
          const [newState, updatedPosts] = db.update(stateWithPost, 'posts')
              .set({ title: 'Updated Title' })
              .where({ id: post.id });
          
          expect(updatedPosts).toHaveLength(1);
          expect(updatedPosts[0].id).toBe(post.id);
          expect(updatedPosts[0].title).toBe('Updated Title');
          expect(updatedPosts[0].updatedAt.getTime()).toBeGreaterThan(originalUpdatedAt.getTime());

          const queriedPost = db.query(newState).from('posts').where({ id: post.id }).first();
          expect(queriedPost?.title).toBe('Updated Title');
        });

        it('should soft delete a record by setting deletedAt', () => {
          const [stateAfterInsert, user] = db.insert(state, 'users', { name: 'To Be Deleted', email: 'delete@me.dev' });
          const [newState, deletedUsers] = db.delete(stateAfterInsert, 'users').where({ id: user.id });

          expect(deletedUsers).toHaveLength(1);
          expect(deletedUsers[0].id).toBe(user.id);
          expect(deletedUsers[0].deletedAt).toBeInstanceOf(Date);

          const foundUser = db.query(newState).from('users').where({ id: user.id }).first();
          expect(foundUser).toBeNull();
          
          const foundUserWithDeleted = db.query(newState).from('users').withDeleted().where({ id: user.id }).first();
          expect(foundUserWithDeleted).not.toBeNull();
          expect(foundUserWithDeleted?.id).toBe(user.id);
        });

        it('should respect unique constraints on insert', () => {
            const [stateAfterInsert] = db.insert(state, 'users', { name: 'Unique', email: 'unique@test.dev' });
            
            expect(() => {
                db.insert(stateAfterInsert, 'users', { name: 'Another', email: 'unique@test.dev' });
            }).toThrow('Unique constraint violated for field "email" on table "users"');
        });

        it('should perform aggregations', () => {
          let tempState = db.createEmptyState();
          [tempState] = db.insert(tempState, 'posts', { title: 'P1', authorId: 1, content: '...', views: 100 });
          [tempState] = db.insert(tempState, 'posts', { title: 'P2', authorId: 1, content: '...', views: 200, published: true });
          [tempState] = db.insert(tempState, 'posts', { title: 'P3', authorId: 2, content: '...', views: 300, published: true });

          const stats = db.query(tempState)
            .from('posts')
            .where({ published: true })
            .aggregate({
              count: konro.count(),
              totalViews: konro.sum('views'),
              avgViews: konro.avg('views'),
              minViews: konro.min('views'),
              maxViews: konro.max('views'),
            });
            
          expect(stats.count).toBe(2);
          expect(stats.totalViews).toBe(500);
          expect(stats.avgViews).toBe(250);
          expect(stats.minViews).toBe(200);
          expect(stats.maxViews).toBe(300);
        });
      });
    patchStrategy: replace
  - type: write
    path: test/integration/in-memory-mode.test.ts
    content: >-
      import { describe, it, expect, beforeEach, afterEach } from 'bun:test';

      import { setupTestDb, cleanupTestDb, testSchema, type User } from
      '../test.util';

      import type { Database } from 'konro';

      import { konro } from 'konro';

      import { readFile } from 'node:fs/promises';

      import { join } from 'node:path';


      describe('Integration: In-Memory Mode', () => {
        let db: Database<typeof testSchema>;
        let testDir: string | undefined;

        beforeEach(async () => {
          const setup = await setupTestDb({
            format: 'json',
            single: { filepath: 'db.json' },
            mode: 'in-memory',
          });
          db = setup.db;
          testDir = setup.testDir;
        });

        afterEach(async () => {
          await cleanupTestDb(testDir);
        });

        it('should perform a full read-operate-write cycle', async () => {
          let state = await db.read();
          expect(db.query(state).from('users').all()).toHaveLength(0);

          let newUser: User;
          [state, newUser] = db.insert(state, 'users', { name: 'Ada Lovelace', email: 'ada@babbage.dev' });
          [state] = db.insert(state, 'posts', { title: 'On the Analytical Engine', authorId: newUser.id, content: '...' });

          await db.write(state);

          const fileContents = await readFile(join(testDir!, 'db.json'), 'utf-8');
          const rawData = JSON.parse(fileContents);
          expect(rawData.users).toHaveLength(1);
          expect(rawData.users[0].name).toBe('Ada Lovelace');

          const db2 = konro.createDatabase({
              schema: testSchema,
              adapter: konro.createFileAdapter({
                  format: 'json',
                  single: { filepath: join(testDir!, 'db.json') },
                  mode: 'in-memory',
              })
          });
          const finalState = await db2.read();
          const users = db2.query(finalState).from('users').all();
          expect(users).toHaveLength(1);
          expect(users[0].name).toBe('Ada Lovelace');
          expect(users[0].createdAt).toBeInstanceOf(Date);
        });

        it('should handle reading from a non-existent file gracefully', async () => {
          const state = await db.read();
          expect(state).toBeDefined();
          expect(state.data.users).toEqual([]);
          expect(state.data.posts).toEqual([]);
        });
      });
    patchStrategy: replace
  - type: write
    path: test/integration/on-demand-mode.test.ts
    content: |-
      import { describe, it, expect, beforeEach, afterEach } from 'bun:test';
      import { setupTestDb, cleanupTestDb, testSchema } from '../test.util';
      import type { Database } from 'konro';
      import { readFile } from 'node:fs/promises';
      import { join } from 'node:path';

      describe('Integration: On-Demand Mode', () => {
        let db: Database<typeof testSchema>;
        let testDir: string | undefined;

        beforeEach(async () => {
          const setup = await setupTestDb({
            format: 'json',
            multi: { dir: './' },
            mode: 'on-demand',
          });
          db = setup.db;
          testDir = setup.testDir;
        });

        afterEach(async () => {
          await cleanupTestDb(testDir);
        });

        it('should insert a record and persist it immediately', async () => {
          const newUser = await db.insert('users', { name: 'Grace Hopper', email: 'grace@navy.mil' });
          expect(newUser.id).toBe(1);

          const filePath = join(testDir!, 'users.json');
          const fileContent = await readFile(filePath, 'utf-8');
          const data = JSON.parse(fileContent);

          expect(data).toHaveLength(1);
          expect(data[0].name).toBe('Grace Hopper');

          const userFromDb = await db.query().from('users').where({ id: 1 }).first();
          expect(userFromDb).not.toBeNull();
          expect(userFromDb?.name).toBe('Grace Hopper');
        });

        it('should update a record and persist it immediately', async () => {
          const user = await db.insert('users', { name: 'Margaret Hamilton', email: 'margaret@nasa.gov' });
          
          const [updatedUser] = await db.update('users')
            .set({ name: 'Margaret H. Hamilton' })
            .where({ id: user.id });

          expect(updatedUser.name).toBe('Margaret H. Hamilton');

          const filePath = join(testDir!, 'users.json');
          const fileContent = await readFile(filePath, 'utf-8');
          const data = JSON.parse(fileContent);

          expect(data[0].name).toBe('Margaret H. Hamilton');
        });
        
        it('should throw on unique constraint violation', async () => {
          await db.insert('users', { name: 'Unique', email: 'unique@on-demand.dev' });
          
          const promise = db.insert('users', { name: 'Another', email: 'unique@on-demand.dev' });
          await expect(promise).rejects.toThrow('Unique constraint violated for field "email" on table "users"');
        });
      });
    patchStrategy: replace
  - type: write
    path: test/integration/relations.test.ts
    content: |-
      import { describe, it, expect, beforeEach, afterEach } from 'bun:test';
      import { setupTestDb, cleanupTestDb, testSchema } from '../test.util';
      import type { Database } from 'konro';

      describe('Integration: Relations', () => {
        let db: Database<typeof testSchema>;
        let testDir: string | undefined;

        beforeEach(async () => {
          const setup = await setupTestDb({
            format: 'json',
            multi: { dir: './' },
            mode: 'on-demand',
          });
          db = setup.db;
          testDir = setup.testDir;
        });

        afterEach(async () => {
          await cleanupTestDb(testDir);
        });

        it('should eager load relations using .with()', async () => {
          const user = await db.insert('users', { name: 'Relational Randy', email: 'randy@relations.dev' });
          await db.insert('posts', { title: 'Post 1', authorId: user.id, content: '...' });
          await db.insert('posts', { title: 'Post 2', authorId: user.id, content: '...' });

          const userWithPosts = await db.query().from('users').where({ id: user.id }).with({ posts: true }).first();
          
          expect(userWithPosts).not.toBeNull();
          expect(userWithPosts?.posts).toBeDefined();
          expect(userWithPosts?.posts).toHaveLength(2);
          expect(userWithPosts?.posts[0].title).toBe('Post 1');
        });

        it('should filter and select on eager loaded relations', async () => {
          const user = await db.insert('users', { name: 'Selective Sam', email: 'sam@select.dev' });
          await db.insert('posts', { title: 'Published Post', authorId: user.id, published: true, content: '...' });
          await db.insert('posts', { title: 'Draft Post', authorId: user.id, published: false, content: '...' });

          const userWithFilteredPosts = await db.query()
            .from('users')
            .where({ id: user.id })
            .with({
              posts: {
                where: (post) => post.published === true,
                select: { title: true }
              }
            })
            .first();

          expect(userWithFilteredPosts?.posts).toHaveLength(1);
          expect(userWithFilteredPosts?.posts[0].title).toBe('Published Post');
          // @ts-expect-error - content should not exist on selected type
          expect(userWithFilteredPosts?.posts[0].content).toBeUndefined();
        });

        it('should handle onDelete: SET NULL on soft-delete', async () => {
          // The coAuthorId on posts is linked to a user with onDelete: SET NULL
          const user1 = await db.insert('users', { name: 'User 1', email: 'u1@setnull.dev' });
          const user2 = await db.insert('users', { name: 'User 2 (Co-author)', email: 'u2@setnull.dev' });
          const post = await db.insert('posts', { title: 'Co-authored', authorId: user1.id, coAuthorId: user2.id, content: '...' });

          expect(post.coAuthorId).toBe(user2.id);

          // Soft-delete the co-author (users table has deletedAt)
          await db.delete('users').where({ id: user2.id });
          
          // Konro should set the coAuthorId on the post to null
          const updatedPost = await db.query().from('posts').where({ id: post.id }).first();
          expect(updatedPost?.coAuthorId).toBeNull();
        });
      });
    patchStrategy: replace
  - type: write
    path: test/e2e/multi-format.test.ts
    content: |-
      import { describe, it, expect, afterEach } from 'bun:test';
      import { setupTestDb, cleanupTestDb } from '../test.util';
      import type { FileAdapterOptions } from 'konro';

      type TestConfig = {
          format: 'yaml' | 'csv' | 'xlsx';
          options: FileAdapterOptions;
      };

      const testMatrix: TestConfig[] = [
          { format: 'yaml', options: { format: 'yaml', multi: { dir: './' }, mode: 'on-demand' }},
          { format: 'csv', options: { format: 'csv', multi: { dir: './' }, mode: 'on-demand' }},
          { format: 'xlsx', options: { format: 'xlsx', multi: { dir: './' }, mode: 'on-demand' }},
      ];

      describe('E2E: Multi-Format Support', () => {
          let cleanupFunc: () => Promise<void> = async () => {};

          afterEach(async () => {
              await cleanupFunc();
          });

          for (const config of testMatrix) {
              it(`should perform CRUD for ${config.format} format`, async () => {
                  const { db, testDir } = await setupTestDb(config.options);
                  cleanupFunc = () => cleanupTestDb(testDir);
                  
                  const user = await db.insert('users', { name: 'Format Tester', email: `test@${config.format}.dev` });
                  expect(user.id).toBe(1);

                  let foundUser = await db.query().from('users').where({ id: user.id }).first();
                  expect(foundUser).not.toBeNull();
                  expect(foundUser?.name).toBe('Format Tester');
                  expect(foundUser?.createdAt).toBeInstanceOf(Date);

                  const [updatedUser] = await db.update('users').set({ name: 'Updated Name' }).where({ id: user.id });
                  expect(updatedUser.name).toBe('Updated Name');

                  foundUser = await db.query().from('users').where({ id: user.id }).first();
                  expect(foundUser?.name).toBe('Updated Name');
                  
                  await db.delete('users').where({ id: user.id });
                  foundUser = await db.query().from('users').where({ id: user.id }).first();
                  expect(foundUser).toBeNull();
              });
          }
      });
    patchStrategy: replace
  - type: write
    path: test/e2e/multi-strategy.test.ts
    content: |-
      import { describe, it, expect, afterEach } from 'bun:test';
      import { setupTestDb, cleanupTestDb } from '../test.util';
      import { readdir, readFile, stat } from 'node:fs/promises';
      import { join } from 'node:path';
      import type { FileAdapterOptions } from 'konro';
      import jsyaml from 'js-yaml';

      type StrategyConfig = {
          name: string;
          options: FileAdapterOptions;
          verifier: (testDir: string) => Promise<void>;
      };

      const strategyMatrix: StrategyConfig[] = [
          {
              name: 'single file',
              options: { format: 'json', single: { filepath: 'my-db.json' }, mode: 'in-memory' },
              verifier: async (testDir: string) => {
                  const files = await readdir(testDir);
                  expect(files).toEqual(['my-db.json']);
                  const content = await readFile(join(testDir, 'my-db.json'), 'utf-8');
                  const data = JSON.parse(content);
                  expect(data.users[0].name).toBe('Strategy Steve');
              }
          },
          {
              name: 'multi file',
              options: { format: 'yaml', multi: { dir: './' }, mode: 'on-demand' },
              verifier: async (testDir: string) => {
                  const files = (await readdir(testDir)).sort();
                  expect(files).toContain('users.yaml');
                  expect(files).toContain('posts.yaml');
                  const content = await readFile(join(testDir, 'users.yaml'), 'utf-8');
                  const data = jsyaml.load(content) as {name: string}[];
                  expect(data[0].name).toBe('Strategy Steve');
              }
          },
          {
              name: 'per record',
              options: { format: 'json', perRecord: { dir: './' }, mode: 'on-demand' },
              verifier: async (testDir: string) => {
                  const userDir = join(testDir, 'users');
                  await stat(userDir);
                  const userFiles = await readdir(userDir);
                  expect(userFiles).toEqual(['1.json']);
              }
          }
      ];

      describe('E2E: Multi-Strategy Support', () => {
          let cleanupFunc: () => Promise<void> = async () => {};

          afterEach(async () => {
              await cleanupFunc();
          });

          for (const config of strategyMatrix) {
              it(`should work correctly with ${config.name} strategy`, async () => {
                  const { db, testDir } = await setupTestDb(config.options);
                  cleanupFunc = () => cleanupTestDb(testDir);

                  // In on-demand mode, operations are async
                  if (config.options.mode === 'on-demand') {
                      const user = await db.insert('users', { name: 'Strategy Steve', email: 'steve@strategy.dev' });
                      await db.insert('posts', { title: 'Strategy Post', authorId: user.id, content: '...' });
                  } else { // in-memory mode
                      let state = await db.read();
                      let user;
                      [state, user] = db.insert(state, 'users', { name: 'Strategy Steve', email: 'steve@strategy.dev' });
                      [state] = db.insert(state, 'posts', { title: 'Strategy Post', authorId: user.id, content: '...' });
                      await db.write(state);
                  }
                  
                  await config.verifier(testDir);
              });
          }
      });
    patchStrategy: replace
snapshot:
  test/test.util.ts: null
  test/unit/schema.test.ts: null
  test/unit/in-memory-ops.test.ts: null
  test/integration/in-memory-mode.test.ts: null
  test/integration/on-demand-mode.test.ts: null
  test/integration/relations.test.ts: null
  test/e2e/multi-format.test.ts: null
  test/e2e/multi-strategy.test.ts: null
  tsconfig.json: |
    {
      "compilerOptions": {
        // Environment setup & latest features
        "lib": ["ESNext"],
        "target": "ESNext", 
        "module": "Preserve",
        "moduleDetection": "force",
        "jsx": "react-jsx",
        "allowJs": true,

        // Bundler mode
        "moduleResolution": "bundler",
        "allowImportingTsExtensions": true,
        "verbatimModuleSyntax": true,
        "noEmit": true,

        // Best practices
        "strict": true,
        "skipLibCheck": true,
        "noFallthroughCasesInSwitch": true,
        "noUncheckedIndexedAccess": true,
        "noImplicitOverride": true,

        // Some stricter flags (disabled by default)
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noPropertyAccessFromIndexSignature": false
      },
      "include": ["test"],
      "exclude": ["dist"]
    }
  package.json: |
    {
      "name": "konro-examples",
      "module": "index.ts",
      "type": "module",
      "devDependencies": {
        "@types/bun": "latest"
      },
      "peerDependencies": {
        "typescript": "^5"
      }
    }
approved: true
